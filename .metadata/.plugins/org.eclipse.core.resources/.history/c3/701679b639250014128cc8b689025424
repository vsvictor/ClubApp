package com.aod.clubapp.communicaton.datamodel;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.aod.clubapp.communicaton.auraapi.BaseGetApiCommand;
import com.aod.clubapp.utils.Preferences;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.google.gson.stream.MalformedJsonException;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.text.TextUtils;
import android.util.Log;

public class LoadedAlbumsKeeper {
	
	private static final String TAG = "LoadedAlbumsKeeper";
	private List<Album> albums; 
	private int lastAlbumsPage = -1;
	private String query;
	private int keeperId;
	
	public static final String PAGES_KEY = "pages_keeper_";
	
	public LoadedAlbumsKeeper(int keeperId) {
		this.keeperId = keeperId;
		lastAlbumsPage = -1;
	}

	public List<Album> getAlbums() {
		return albums;
	}
	
	public void setAlbums(List<Album> albums) {
		this.albums = new ArrayList<Album>();
		this.albums.addAll(albums);
		lastAlbumsPage = 0;
	}
	public int getLastAlbumsPage() {
		return lastAlbumsPage;
	}
	public void setLastAlbumsPage(int lastAlbumsPage) {
		this.lastAlbumsPage = lastAlbumsPage;
	}
	public String getQuery() {
		return query;
	}
	public void setQuery(String query) {
		this.query = query;
	}
	
	public void empty() {
		albums = new ArrayList<Album>();
		lastAlbumsPage = -1;
		query = null;
	}
	
	public boolean isEmpty(){
		return albums == null || albums.size() < 1;
	}
	
	//public synchronized void addAlbumsNextPage(List<Album> albums, int page){
	public void addAlbumsNextPage(List<Album> albums, int page){		
		if(this.albums == null){
			this.albums = new ArrayList<Album>();
		}
		if((page - lastAlbumsPage) != 1 ){
			Log.e(TAG, "addAlbumsNextPage unexpected page, keeper " + keeperId);
		} else {
			lastAlbumsPage++;
			this.albums.addAll(albums);
		}
	}
	
	public int size(){
		if(albums == null)
			return 0;
		return albums.size();
	}
	
	public void clearState(String path, Context cntx){
		File fl = new File(path);
		if(fl.exists()){
			fl.delete();
		}
		SharedPreferences prefs= Preferences.getAppPreferences(cntx);
		Editor ed = prefs.edit();
		ed.remove(PAGES_KEY + Integer.toString(keeperId));
		ed.commit();
	}
	
	public void saveState(String path, Context cntx){
		if(isEmpty())
			return;
		//do not save search results
		if(!TextUtils.isEmpty(query))
			return;
		Albums alb = new Albums(albums.toArray(new Album[albums.size()]));			
		String result = BaseGetApiCommand.getGson().toJson(alb);
		try {
			FileOutputStream out;			
			out = new FileOutputStream(path);
			OutputStreamWriter writer = new OutputStreamWriter(out);
			writer.write(result);
			writer.flush();
			writer.close();
			
			SharedPreferences prefs= Preferences.getAppPreferences(cntx);
			Editor ed = prefs.edit();			
			ed.putInt(PAGES_KEY + Integer.toString(keeperId), lastAlbumsPage);
			ed.commit();
			
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	public void restoreState(String path, Context cntx){
		SharedPreferences prefs= Preferences.getAppPreferences(cntx);
        lastAlbumsPage = prefs.getInt(PAGES_KEY + Integer.toString(keeperId), -1);
        if(lastAlbumsPage >= 0){
			try{		  
				FileInputStream fin = new FileInputStream(path);
				InputStreamReader inputStreamReader = new InputStreamReader(fin);
	            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
	            String receiveString = "";
	            StringBuilder stringBuilder = new StringBuilder();
	
	            while ( (receiveString = bufferedReader.readLine()) != null ) {
	                stringBuilder.append(receiveString);
	            }
	            fin.close();
	            
	            String reslt = stringBuilder.toString();
	            if(!TextUtils.isEmpty(reslt)){
		            Gson gson = BaseGetApiCommand.getGson();
		            Albums albums = gson.fromJson(reslt, Albums.class);
		            if(albums.getAlbums() != null && albums.getAlbums().length > 0){
		            	Log.d(TAG, "albums restored");
		            	setAlbums(Arrays.asList(albums.getAlbums()));
		            }
	            }
			} catch (JsonSyntaxException e) {
				Log.e(TAG, "restoreState()", e);         
			} catch (MalformedJsonException e) {
				Log.e(TAG, "restoreState()", e);		
			} catch (FileNotFoundException e) {
				//no cache file, nothing to load
			}catch (IOException e) {
				// TODO Auto-generated catch block
				Log.e(TAG, "restoreState()", e);
			}
        }
	}
}
