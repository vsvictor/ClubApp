package com.aod.clubapp;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;


import com.aod.clubapp.communicaton.datamodel.Album;
import com.aod.clubapp.communicaton.datamodel.AuraDataSession;
import com.aod.clubapp.utils.Preferences;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesUtil;
import com.google.android.gms.gcm.GoogleCloudMessaging;

import android.app.ActionBar;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager.NameNotFoundException;
import android.graphics.drawable.AnimationDrawable;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.content.LocalBroadcastManager;
import android.util.Log;
import android.util.TypedValue;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.widget.AbsListView;
import android.widget.AdapterView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.SearchView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.SearchView.OnQueryTextListener;
/*
 * todo use late insted of MainActivity to show announces
 */
public class AnnouncementListActivity extends AuraBaseActivity  implements OnQueryTextListener , SearchView.OnCloseListener{

	private static final String TAG = "AnnouncementListActivity"; 
    
    GoogleCloudMessaging gcm;
    AtomicInteger msgId = new AtomicInteger();
    SharedPreferences prefs;
    Context context;
    String regid;
    Handler handler;
	public static final long WAIT_BEFORE_UPDATE = 10000;
	
	private ListView lv;
	
	private ArrayList<Album> displayedAlbums;
	private int actionBarHeight = 0;
	private boolean updTitleOnScroll = false;
	private String searchQuery = null;

	private  int lastItem; 
	
	private AbsListView.OnScrollListener onScroll = new AbsListView.OnScrollListener() {
		
		int mScrollState = AbsListView.OnScrollListener.SCROLL_STATE_IDLE;
		int callsCnt = 0;
		@Override
		public void onScrollStateChanged(AbsListView view, int scrollState) {
			mScrollState = scrollState;
		}
		
		@Override
		public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
			ActionBar abar = getActionBar();
			if(abar == null)
				return;
			if(visibleItemCount == 0)
				return;
			
			if (mScrollState == OnScrollListener.SCROLL_STATE_IDLE && (firstVisibleItem + visibleItemCount) >= totalItemCount ){
				getLocalService().loadAlbumsNextPage(getSearchQuery());
			}
			
	        if (mScrollState == OnScrollListener.SCROLL_STATE_IDLE && callsCnt > 5)
	            return;
	        if(updTitleOnScroll){
				if(lastItem <= firstVisibleItem+1){
					String title = getString(R.string.title_events);
					if(abar.getTitle().toString().compareTo(title.toString()) != 0) {
						abar.setTitle(title);
					}
				} else {
					String title = getString(R.string.title_announcement);
					if(abar.getTitle().toString().compareTo(title.toString()) != 0) {
						abar.setTitle(title);
					}
				}
	        }
			moveTitleOnScroll(view, firstVisibleItem, visibleItemCount, totalItemCount);
			callsCnt++;
		}
	};
	
	private Runnable reloader = new Runnable() {				
		@Override
		public void run() {
			Log.d(TAG, "albums reloader");
			if(getDataSession() == null){
				//re-schedule
				handler.removeCallbacks(reloader);
				handler.postDelayed(reloader, 1000);
				return;
			}
			if(!isEmpty()){
				return;
			}
			if(!getDataSession().haveAlbums()){
				getLocalService().loadAlbums(searchQuery, false);
			}
		}	
	};

	private BroadcastReceiver albumsStatusReceiver = new BroadcastReceiver() {
		
		@Override
		public void onReceive(Context context, Intent intent) {
			Log.i(TAG, "catched broadcast AuraDataSession.ACTION_LOAD_ALBUMS_RESULT");
			int status = intent.getIntExtra(AuraDataSession.OPERATION_STATUS, AuraDataSession.STATUS_FAIL);
			int tp = intent.getIntExtra(AuraDataSession.ALBUMS_LIST_TYPE, AuraDataSession.ALBUMS_LIST_TYPE_DEFAULT);
			
			if(tp != AuraDataSession.ALBUMS_LIST_TYPE_DEFAULT ){
				return;
			}

			if (status == AuraDataSession.STATUS_FAIL) {
				Log.i(TAG, "failed to load albums notification");			
				return;				
			}			
			//everything ok, reload data in list
			fillContent();			
		}
	};	
	
	
	@Override
	public void onDataServiceConnected() {
		super.onDataServiceConnected();
		Log.d(TAG, "onDataServiceConnected");
        // Check device for Play Services APK. If check succeeds, proceed with
        //  GCM registration.
        if (checkPlayServices()) {
            gcm = GoogleCloudMessaging.getInstance(this);
            regid = getRegistrationId(context);

            if (regid.isEmpty()) {
                registerInBackground();
            }
        } else {
            Log.i(TAG, "No valid Google Play Services APK found.");
        }		

		if(getDataSession().getMyProfile() == null) {
			getLocalService().reloadProfile();
		}
		if(getDataSession().getCategories() == null) {
			getLocalService().loadPlaceCategories();
		}
		if(getDataSession().getFollowedUsersCount() == 0){
			getLocalService().loadFollowedUsers();
		}
		if(getDataSession().getSearchOptions() == null){
			getLocalService().reloadSearchOptions();
		}        
		fillContent();		
	}
	
	@Override
	public void onDataServiceDisConnected() {
	}

	@Override
	protected void onStart() {
		super.onStart();
		context = getApplicationContext();
		LocalBroadcastManager.getInstance(this).registerReceiver(albumsStatusReceiver, new IntentFilter(AuraDataSession.ACTION_LOAD_ALBUMS_RESULT));		
	}
	
	@Override
	protected void onStop() {
		super.onStop();		
		LocalBroadcastManager.getInstance(this).unregisterReceiver(albumsStatusReceiver);
	}
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_announcment);

		handler = new Handler();
		//init progress indicator
		lv = (ListView)findViewById(R.id.data_list);
		View emptView = getLayoutInflater().inflate(R.layout.clubs_animated_progress, null);
		addContentView(emptView, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
		lv.setEmptyView(emptView);
		lv.setAdapter(null);
		
		ImageView iv = (ImageView)emptView.findViewById(R.id.loading_data);
		AnimationDrawable frameAnimation = (AnimationDrawable) iv.getDrawable();
		frameAnimation.start();
		
		lv.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
				ArrayList<Album> listAlb = displayedAlbums;
				Log.d(TAG, "clicked item in albums list: " + listAlb.get(position).getName());
				showAlbumContent(listAlb.get(position).getId());
				
			}
		});
		// calculate action bar height
		TypedValue tv = new TypedValue();
		if (getTheme().resolveAttribute(android.R.attr.actionBarSize, tv, true)){
		    actionBarHeight = TypedValue.complexToDimensionPixelSize(tv.data,getResources().getDisplayMetrics());
		}
		fillContent();		
	}

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.main_menu, menu);
        
    	SearchView searchView = (SearchView) menu.findItem(R.id.action_search).getActionView();
    	searchView.setOnQueryTextListener(this);
    	searchView.setOnCloseListener(this);
        
        return true;
    }
    
    @Override
    public boolean onPrepareOptionsMenu(Menu menu) {    	    	
    	menu.removeItem(R.id.menu_announcement);
    	return super.onPrepareOptionsMenu(menu);
    }
	
	
	private void fillContent(){
		if(getDataSession() == null)
			return;
		
		List<Album> albumsList = getDataSession().getAlbums();
		getActionBar().setTitle(getString(R.string.menu_interview));
	
		if(getDataSession().haveAlbums()) {			
			displayedAlbums = new ArrayList<Album>(albumsList);
			if(lv.getAdapter() != null && lv.getAdapter().getCount() >= displayedAlbums.size()){
				return;
			}
		
			Album[] albums = albumsList.toArray(new Album[displayedAlbums.size()]);
			AlbumListAdapter adapter;
			

			boolean updatePos = false;
			if(lv.getAdapter() == null){
				adapter = new AlbumListAdapter(this, albums, false);
				lv.setAdapter(adapter);
				updatePos = true;
			}else {
				adapter = (AlbumListAdapter)lv.getAdapter();
				adapter.setNewValues(albums);				
				adapter.notifyDataSetChanged();
			}
		
			lastItem = getFirstEventItem();
			
			lv.setOnScrollListener(onScroll);
			if(updatePos){
				lv.setSelectionFromTop(lastItem, actionBarHeight);
				getActionBar().setTitle(getString(R.string.title_events));
			}
			updTitleOnScroll = true;
		}else{
			Log.d(TAG, "Reloading data in listview: empty");
			lv.setAdapter(null);
			checkDataAndScheduleUpdate(MainActivity.WAIT_BEFORE_UPDATE);			
		}
		
	}
	
	/**
	 * Gets the current registration ID for application on GCM service.
	 * <p>
	 * If result is empty, the app needs to register.
	 *
	 * @return registration ID, or empty string if there is no existing
	 *         registration ID.
	 */
	private String getRegistrationId(Context context) {
	    final SharedPreferences prefs = getGCMPreferences(context);
	    String registrationId = prefs.getString(MainActivity.PROPERTY_REG_ID, "");
	    if (registrationId.isEmpty()) {
	        Log.i(TAG, "Registration not found.");
	        return "";
	    }
	    // Check if app was updated; if so, it must clear the registration ID
	    // since the existing regID is not guaranteed to work with the new
	    // app version.
	    int registeredVersion = prefs.getInt(MainActivity.PROPERTY_APP_VERSION, Integer.MIN_VALUE);
	    int currentVersion = getAppVersion(context);
	    if (registeredVersion != currentVersion) {
	        Log.i(TAG, "App version changed.");
	        return "";
	    }
	    return registrationId;
	}
	
	/**
	 * Stores the registration ID and app versionCode in the application's
	 * {@code SharedPreferences}.
	 *
	 * @param context application's context.
	 * @param regId registration ID
	 */
	private void storeRegistrationId(Context context, String regId) {
	    final SharedPreferences prefs = getGCMPreferences(context);
	    int appVersion = getAppVersion(context);
	    Log.i(TAG, "Saving regId on app version " + appVersion);
	    SharedPreferences.Editor editor = prefs.edit();
	    editor.putString(MainActivity.PROPERTY_REG_ID, regId);
	    editor.putInt(MainActivity.PROPERTY_APP_VERSION, appVersion);
	    editor.commit();
	}	
	
	/**
	 * @return Application's {@code SharedPreferences}.
	 */
	private SharedPreferences getGCMPreferences(Context context) {
	    return getSharedPreferences(Preferences.PREF_STORAGE_NAME,Context.MODE_PRIVATE);
	}
	
	
	/**
	 * Check the device to make sure it has the Google Play Services APK. If
	 * it doesn't, display a dialog that allows users to download the APK from
	 * the Google Play Store or enable it in the device's system settings.
	 */
	private boolean checkPlayServices() {
	    int resultCode = GooglePlayServicesUtil.isGooglePlayServicesAvailable(this);
	    if (resultCode != ConnectionResult.SUCCESS) {	        
	        return false;
	    }
	    return true;
	}
	
	/**
	 * @return Application's version code from the {@code PackageManager}.
	 */
	private static int getAppVersion(Context context) {
	    try {
	        PackageInfo packageInfo = context.getPackageManager()
	                .getPackageInfo(context.getPackageName(), 0);
	        return packageInfo.versionCode;
	    } catch (NameNotFoundException e) {
	        // should never happen
	        throw new RuntimeException("Could not get package name: " + e);
	    }
	}
	/**
	 * Registers the application with GCM servers asynchronously.
	 * <p>
	 * Stores the registration ID and app versionCode in the application's
	 * shared preferences.
	 */
	private void registerInBackground() {
	    new AsyncTask<Void, Void, String>() {
	        @Override
	        protected String doInBackground(Void... params) {
	            String msg = "";
	            try {
	                if (gcm == null) {
	                    gcm = GoogleCloudMessaging.getInstance(context);
	                }
	                regid = gcm.register(MainActivity.SENDER_ID);
	                msg = "Device registered, registration ID=" + regid;

	                // You should send the registration ID to your server over HTTP,
	                // so it can use GCM/HTTP or CCS to send messages to your app.
	                // The request to your server should be authenticated if your app
	                // is using accounts.
	                sendRegistrationIdToBackend();

	                // For this demo: we don't need to send it because the device
	                // will send upstream messages to a server that echo back the
	                // message using the 'from' address in the message.

	                // Persist the regID - no need to register again.
	                storeRegistrationId(context, regid);
	            } catch (IOException ex) {
	                msg = "Error :" + ex.getMessage();
	                // If there is an error, don't just keep trying to register.
	                // Require the user to click a button again, or perform
	                // exponential back-off.
	            }
	            return msg;
	        }

	        @Override
	        protected void onPostExecute(String msg) {
	            Log.i(TAG, msg);
	        }
	    }.execute(null, null, null);
	}	
	
	private void sendRegistrationIdToBackend() {
		getLocalService().sendRegId(regid);
	}
	
    public void showAlbumContent(long albumId) {
    	Log.d(TAG, "showAlbumContent " + Long.toString(albumId));
    	
    	Album alb = getDataSession().getAlbumById(albumId);
    	if(alb == null){
    		Log.w(TAG, "cannot find album with id =" + albumId);
    		return;
    	}
    	if(alb.isInterview()) {
    		InterviewDisplayActivity.showInterview(albumId, this);
    	} else {
    		startActivity(new Intent(this, AlbumContentActivity.class).putExtra(AlbumContentActivity.PARAM_ALBUM_ID, albumId));
    	}
    }

    public String getSearchQuery(){
		return searchQuery;
	}
    
	@Override
	public boolean onQueryTextSubmit(String query) {
		Log.d(TAG, "searching for:" + query);
		searchQuery = query;
		getLocalService().loadAlbums(searchQuery, true);
		return true;
	}
	
	@Override
	public boolean onClose() {
		searchQuery = "";
		getLocalService().loadAlbums(searchQuery, true);
		return false;
	}
	
	public void moveTitleOnScroll(AbsListView view, int firstVisibleItem, int visibleCount, int totalItemCount) {
        for (int i=0; i < visibleCount; i++) {
            View listItem = lv.getChildAt(i);
            if (listItem == null)
                break;
                        
            LinearLayout title = (LinearLayout)listItem.findViewById(R.id.black_overlay);
 
            int topMargin = 0;
            if (i == 0) {
                int top = listItem.getTop();
                int height = listItem.getHeight();
 
                // if top is negative, the list item has scrolled up.
                // if the title view falls within the container's visible portion,
                //     set the top margin to be the (inverse) scrolled amount of the container.
                // else
                //     set the top margin to be the difference between the heights.
                if (top < 0){
                	// topMargin = title.getHeight() < (top + height) ? -top : (height - title.getHeight());
                    topMargin = title.getHeight() < (top + height - actionBarHeight) ? (-top + actionBarHeight) : (height - title.getHeight());
                } else {
                	if(actionBarHeight < top){
	                	topMargin = 0;
	                } else {
	                	topMargin = actionBarHeight - top;
	                }
                }
            }
            if(i == 1){
            	int top = listItem.getTop();
                int height = listItem.getHeight();
                if (top > 0){
	                if(actionBarHeight < top){
	                	topMargin = 0;
	                } else {
	                	topMargin = actionBarHeight - top;
	                }
                }
            }
            if(listItem.getBottom() < 0){
            	topMargin = 0;
            }
            // set the margin.
            topMargin = actionBarHeight; 
            ((ViewGroup.MarginLayoutParams) title.getLayoutParams()).topMargin = topMargin;
 
            // request Android to layout again.
            listItem.requestLayout();
        }
	}
	
	private int getFirstEventItem(){
		int result = 0;
		if(displayedAlbums == null)
			return result;
		long currnentTime = System.currentTimeMillis();
		for(int i=0; i < displayedAlbums.size(); i++){
			Album alb = displayedAlbums.get(i);
			result = i;
			if(alb.getDate().getTime() < currnentTime){
				return i;
			}
		}
		return result;		
	}
	
	public void checkDataAndScheduleUpdate(long msec){
		handler.postDelayed(reloader, msec);		
	}
	
	public boolean isEmpty(){
		if(lv.getAdapter() == null)
			return true;
		return lv.getAdapter().getCount() == 0;
	}
}
