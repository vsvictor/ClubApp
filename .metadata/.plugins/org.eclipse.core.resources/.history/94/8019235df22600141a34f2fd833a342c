package com.aod.clubapp.communicaton.auraapi;

import java.io.IOException;
import java.net.MalformedURLException;
import java.util.ArrayList;

import android.content.Context;
import android.content.Intent;
import android.support.v4.content.LocalBroadcastManager;
import android.text.TextUtils;
import android.util.Log;

import com.aod.clubapp.communicaton.datamodel.Album;
import com.aod.clubapp.communicaton.datamodel.Albums;
import com.aod.clubapp.communicaton.datamodel.AuraDataSession;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;

/**
 * Implement command to load all albums 
 *
 * @author Anatoliy Odukha <aodukha@gmail.com>
 */
public class LoadAlbums extends BaseGetApiCommand implements IApiCommand {
	
	private static final String apiPath = AuraDataSession.BASE_URL + "albums?";
	//http://fixapp-clubs.herokuapp.com/api/v1/albums/followed_users?auth_token=cc49a0bb0bbcb8c34a959745c077a9be&page=1
	private static final String apiPathFollowed = AuraDataSession.BASE_URL_OLD + "albums/followed_users?";
	private static final String apiPathForPlace = AuraDataSession.BASE_URL_OLD + "albums?";
	
	private String query;
	private ArrayList<Album> loadedData;
	private long placeId = -1;
	private boolean followedUsers = false;
	private int page;
	
	public LoadAlbums(String authTooken, String query, int page, boolean followedUsers) {
		super(authTooken);
		this.query = query;
		this.followedUsers = followedUsers;
		this.page = page;
	}
	
	public LoadAlbums(String authTooken, String query, int page) {
		super(authTooken);
		this.query = query;
		this.followedUsers = false;
		this.page = page;
	}
	
	public LoadAlbums(String authTooken, String query, int page,  long placeId) {
		super(authTooken);
		this.query = query;
		this.placeId = placeId;
		this.followedUsers = false;
		this.page = page;
	}
	
	@Override
	public void run() {
		
		loadedData = new ArrayList<Album>();

		try {
				
				String gq;
				if(followedUsers){
					gq = appendAuthToUrl(apiPathFollowed);
				}else {
					if(placeId > 0){
						gq = appendAuthToUrl(apiPathForPlace);
					}
					else {
						gq = appendAuthToUrl(getApiPath());
					}
				}
				//gq = addParameterToUrl(gq, "page", Integer.toString(p));
				gq = addParameterToUrl(gq, "page", Integer.toString(page));				
				if(placeId > 0){
					gq = addParameterToUrl(gq, "place_id", Long.toString(placeId));	
				}
				if(!TextUtils.isEmpty(query)) {
					gq = addParameterToUrl(gq, "q", query);				
				}
				String qRes = doGet(gq);
				if( TextUtils.isEmpty(qRes)) {
					//break;
					return;
				} else {
					Log.d(TAG, "LoadAlbums loaded: " + qRes);
					Gson gson = getGson();
					Albums albums =  gson.fromJson(qRes, Albums.class);
					if(albums != null && albums.getAlbums().length > 0 ) {
						for(Album alb : albums.getAlbums()) {
							
							loadedData.add(alb);
						}
					} else {
						//all available albums loaded
						return;
					}
				}					
		} catch (ServerUnAuthorizedException e) {
			setCommandFailed(true);
		} catch (JsonSyntaxException e) {
			Log.e(TAG, "bad json comes from server", e);
			setCommandFailed(true);
		} catch (MalformedURLException e) {
			setCommandFailed(true);
			Log.e(TAG, "LoadAlbums.run() failed by exception", e );
			e.printStackTrace();
		} catch (IOException e) {
			setCommandFailed(true);
			Log.e(TAG, "LoadAlbums.run() failed by exception", e );
			e.printStackTrace();
		}
	}
	
	@Override
	public void onSuccesExecution(Context cntx) {
	}

	@Override
	public void onFailExecution(Context cntx) {
		
	}

	@Override
	public boolean isFailed() {

		return false;
	}

	public ArrayList<Album> getLoadedData() {
		return loadedData;
	}

	@Override
	public String getApiPath() {
		return apiPath;
	}

}
